// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: datatypes_v1.proto

package engine

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ccy int32

const (
	Ccy_DEFAULT Ccy = 0
	Ccy_CNY     Ccy = 1
	Ccy_USD     Ccy = 2
	Ccy_GBP     Ccy = 3
	Ccy_EUR     Ccy = 4
	Ccy_JPY     Ccy = 6
	Ccy_THB     Ccy = 7
	Ccy_MYR     Ccy = 8
	Ccy_VND     Ccy = 9
	Ccy_KRW     Ccy = 10
	Ccy_IDR     Ccy = 11
	Ccy_ZAR     Ccy = 12
	Ccy_XBT     Ccy = 13
	Ccy_TRY     Ccy = 14
	Ccy_AMD     Ccy = 15
	Ccy_NOK     Ccy = 16
	Ccy_SEK     Ccy = 17
	Ccy_RUB     Ccy = 18
	Ccy_KZT     Ccy = 19
	Ccy_MMK     Ccy = 20
	Ccy_BRL     Ccy = 21
	Ccy_VES     Ccy = 22
	Ccy_MXN     Ccy = 23
	Ccy_BOB     Ccy = 24
	Ccy_PYG     Ccy = 25
	Ccy_PEN     Ccy = 26
	Ccy_CLP     Ccy = 27
	Ccy_UYU     Ccy = 28
	Ccy_CAD     Ccy = 29
	Ccy_AED     Ccy = 30
	Ccy_ALL     Ccy = 31
	Ccy_AOA     Ccy = 32
	Ccy_ARS     Ccy = 34
	Ccy_AZN     Ccy = 33
	Ccy_BAM     Ccy = 35
	Ccy_BDT     Ccy = 36
	Ccy_BGN     Ccy = 37
	Ccy_BHD     Ccy = 38
	Ccy_BND     Ccy = 39
	Ccy_BWP     Ccy = 40
	Ccy_CDF     Ccy = 41
	Ccy_CHF     Ccy = 42
	Ccy_CRC     Ccy = 43
	Ccy_COP     Ccy = 44
	Ccy_CZK     Ccy = 45
	Ccy_DKK     Ccy = 46
	Ccy_DOP     Ccy = 47
	Ccy_EGP     Ccy = 48
	Ccy_GEL     Ccy = 49
	Ccy_GHS     Ccy = 50
	Ccy_GIP     Ccy = 51
	Ccy_GNF     Ccy = 52
	Ccy_GTQ     Ccy = 53
	Ccy_HKD     Ccy = 54
	Ccy_HRK     Ccy = 55
	Ccy_HTG     Ccy = 56
	Ccy_HUF     Ccy = 57
	Ccy_ILS     Ccy = 58
	Ccy_INR     Ccy = 59
	Ccy_IQD     Ccy = 60
	Ccy_IRR     Ccy = 61
	Ccy_ISK     Ccy = 62
	Ccy_JOD     Ccy = 63
	Ccy_KES     Ccy = 64
	Ccy_KWD     Ccy = 65
	Ccy_LBP     Ccy = 66
	Ccy_LSL     Ccy = 67
	Ccy_MAD     Ccy = 68
	Ccy_MBC     Ccy = 69
	Ccy_MKD     Ccy = 70
	Ccy_MWK     Ccy = 71
	Ccy_NAD     Ccy = 72
	Ccy_NGN     Ccy = 73
	Ccy_NZD     Ccy = 74
	Ccy_OMR     Ccy = 75
	Ccy_ZMW     Ccy = 76
	Ccy_ZMK     Ccy = 77
	Ccy_PLN     Ccy = 78
	Ccy_XOF     Ccy = 79
	Ccy_QAR     Ccy = 80
	Ccy_RON     Ccy = 81
	Ccy_RSD     Ccy = 82
	Ccy_RWF     Ccy = 83
	Ccy_SAR     Ccy = 84
	Ccy_TMT     Ccy = 85
	Ccy_TND     Ccy = 86
	Ccy_TZS     Ccy = 87
	Ccy_UAH     Ccy = 88
	Ccy_UBC     Ccy = 89
	Ccy_UGX     Ccy = 90
	Ccy_XAF     Ccy = 91
	Ccy_BTC     Ccy = 92
	Ccy_ARX     Ccy = 93
	Ccy_VEX     Ccy = 94
	Ccy_UST     Ccy = 95
	Ccy_ETH     Ccy = 96
	Ccy_BCH     Ccy = 97
	Ccy_LTC     Ccy = 98
	Ccy_BYN     Ccy = 99
	Ccy_UZS     Ccy = 100
	Ccy_MDL     Ccy = 101
	Ccy_LKR     Ccy = 102
	Ccy_MGA     Ccy = 103
	Ccy_TJS     Ccy = 104
	Ccy_KGS     Ccy = 105
)

// Enum value maps for Ccy.
var (
	Ccy_name = map[int32]string{
		0:   "DEFAULT",
		1:   "CNY",
		2:   "USD",
		3:   "GBP",
		4:   "EUR",
		6:   "JPY",
		7:   "THB",
		8:   "MYR",
		9:   "VND",
		10:  "KRW",
		11:  "IDR",
		12:  "ZAR",
		13:  "XBT",
		14:  "TRY",
		15:  "AMD",
		16:  "NOK",
		17:  "SEK",
		18:  "RUB",
		19:  "KZT",
		20:  "MMK",
		21:  "BRL",
		22:  "VES",
		23:  "MXN",
		24:  "BOB",
		25:  "PYG",
		26:  "PEN",
		27:  "CLP",
		28:  "UYU",
		29:  "CAD",
		30:  "AED",
		31:  "ALL",
		32:  "AOA",
		34:  "ARS",
		33:  "AZN",
		35:  "BAM",
		36:  "BDT",
		37:  "BGN",
		38:  "BHD",
		39:  "BND",
		40:  "BWP",
		41:  "CDF",
		42:  "CHF",
		43:  "CRC",
		44:  "COP",
		45:  "CZK",
		46:  "DKK",
		47:  "DOP",
		48:  "EGP",
		49:  "GEL",
		50:  "GHS",
		51:  "GIP",
		52:  "GNF",
		53:  "GTQ",
		54:  "HKD",
		55:  "HRK",
		56:  "HTG",
		57:  "HUF",
		58:  "ILS",
		59:  "INR",
		60:  "IQD",
		61:  "IRR",
		62:  "ISK",
		63:  "JOD",
		64:  "KES",
		65:  "KWD",
		66:  "LBP",
		67:  "LSL",
		68:  "MAD",
		69:  "MBC",
		70:  "MKD",
		71:  "MWK",
		72:  "NAD",
		73:  "NGN",
		74:  "NZD",
		75:  "OMR",
		76:  "ZMW",
		77:  "ZMK",
		78:  "PLN",
		79:  "XOF",
		80:  "QAR",
		81:  "RON",
		82:  "RSD",
		83:  "RWF",
		84:  "SAR",
		85:  "TMT",
		86:  "TND",
		87:  "TZS",
		88:  "UAH",
		89:  "UBC",
		90:  "UGX",
		91:  "XAF",
		92:  "BTC",
		93:  "ARX",
		94:  "VEX",
		95:  "UST",
		96:  "ETH",
		97:  "BCH",
		98:  "LTC",
		99:  "BYN",
		100: "UZS",
		101: "MDL",
		102: "LKR",
		103: "MGA",
		104: "TJS",
		105: "KGS",
	}
	Ccy_value = map[string]int32{
		"DEFAULT": 0,
		"CNY":     1,
		"USD":     2,
		"GBP":     3,
		"EUR":     4,
		"JPY":     6,
		"THB":     7,
		"MYR":     8,
		"VND":     9,
		"KRW":     10,
		"IDR":     11,
		"ZAR":     12,
		"XBT":     13,
		"TRY":     14,
		"AMD":     15,
		"NOK":     16,
		"SEK":     17,
		"RUB":     18,
		"KZT":     19,
		"MMK":     20,
		"BRL":     21,
		"VES":     22,
		"MXN":     23,
		"BOB":     24,
		"PYG":     25,
		"PEN":     26,
		"CLP":     27,
		"UYU":     28,
		"CAD":     29,
		"AED":     30,
		"ALL":     31,
		"AOA":     32,
		"ARS":     34,
		"AZN":     33,
		"BAM":     35,
		"BDT":     36,
		"BGN":     37,
		"BHD":     38,
		"BND":     39,
		"BWP":     40,
		"CDF":     41,
		"CHF":     42,
		"CRC":     43,
		"COP":     44,
		"CZK":     45,
		"DKK":     46,
		"DOP":     47,
		"EGP":     48,
		"GEL":     49,
		"GHS":     50,
		"GIP":     51,
		"GNF":     52,
		"GTQ":     53,
		"HKD":     54,
		"HRK":     55,
		"HTG":     56,
		"HUF":     57,
		"ILS":     58,
		"INR":     59,
		"IQD":     60,
		"IRR":     61,
		"ISK":     62,
		"JOD":     63,
		"KES":     64,
		"KWD":     65,
		"LBP":     66,
		"LSL":     67,
		"MAD":     68,
		"MBC":     69,
		"MKD":     70,
		"MWK":     71,
		"NAD":     72,
		"NGN":     73,
		"NZD":     74,
		"OMR":     75,
		"ZMW":     76,
		"ZMK":     77,
		"PLN":     78,
		"XOF":     79,
		"QAR":     80,
		"RON":     81,
		"RSD":     82,
		"RWF":     83,
		"SAR":     84,
		"TMT":     85,
		"TND":     86,
		"TZS":     87,
		"UAH":     88,
		"UBC":     89,
		"UGX":     90,
		"XAF":     91,
		"BTC":     92,
		"ARX":     93,
		"VEX":     94,
		"UST":     95,
		"ETH":     96,
		"BCH":     97,
		"LTC":     98,
		"BYN":     99,
		"UZS":     100,
		"MDL":     101,
		"LKR":     102,
		"MGA":     103,
		"TJS":     104,
		"KGS":     105,
	}
)

func (x Ccy) Enum() *Ccy {
	p := new(Ccy)
	*p = x
	return p
}

func (x Ccy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ccy) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_v1_proto_enumTypes[0].Descriptor()
}

func (Ccy) Type() protoreflect.EnumType {
	return &file_datatypes_v1_proto_enumTypes[0]
}

func (x Ccy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ccy.Descriptor instead.
func (Ccy) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{0}
}

type WalletTransactionPB_Type int32

const (
	WalletTransactionPB_DEFAULT  WalletTransactionPB_Type = 0
	WalletTransactionPB_WAGER    WalletTransactionPB_Type = 1
	WalletTransactionPB_PAYOUT   WalletTransactionPB_Type = 2
	WalletTransactionPB_ENDROUND WalletTransactionPB_Type = 3
)

// Enum value maps for WalletTransactionPB_Type.
var (
	WalletTransactionPB_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "WAGER",
		2: "PAYOUT",
		3: "ENDROUND",
	}
	WalletTransactionPB_Type_value = map[string]int32{
		"DEFAULT":  0,
		"WAGER":    1,
		"PAYOUT":   2,
		"ENDROUND": 3,
	}
)

func (x WalletTransactionPB_Type) Enum() *WalletTransactionPB_Type {
	p := new(WalletTransactionPB_Type)
	*p = x
	return p
}

func (x WalletTransactionPB_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletTransactionPB_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_v1_proto_enumTypes[1].Descriptor()
}

func (WalletTransactionPB_Type) Type() protoreflect.EnumType {
	return &file_datatypes_v1_proto_enumTypes[1]
}

func (x WalletTransactionPB_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletTransactionPB_Type.Descriptor instead.
func (WalletTransactionPB_Type) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{2, 0}
}

type GamestatePB_GameID int32

const (
	GamestatePB_DEFAULT                 GamestatePB_GameID = 0
	GamestatePB_THE_YEAR_OF_ZHU         GamestatePB_GameID = 1
	GamestatePB_ZODIAC                  GamestatePB_GameID = 2
	GamestatePB_CAT_THIEF               GamestatePB_GameID = 3
	GamestatePB_THREE_KINGDOM_SHU       GamestatePB_GameID = 4
	GamestatePB_THREE_KINGDOM_WEI       GamestatePB_GameID = 5
	GamestatePB_THREE_KINGDOM_WU        GamestatePB_GameID = 6
	GamestatePB_CRIMSON_MASQUERADE      GamestatePB_GameID = 7
	GamestatePB_JUNGLE_SAGA             GamestatePB_GameID = 8
	GamestatePB_CANDY_GIRLS             GamestatePB_GameID = 9
	GamestatePB_WUKONG_TREASURES        GamestatePB_GameID = 10
	GamestatePB_STREET_RACER            GamestatePB_GameID = 11
	GamestatePB_BABAKS_QUEST            GamestatePB_GameID = 12
	GamestatePB_ASTRO_GEMS              GamestatePB_GameID = 13
	GamestatePB_PANDA                   GamestatePB_GameID = 14
	GamestatePB_KING_OF_GAMBLERS        GamestatePB_GameID = 15
	GamestatePB_ART_OF_THE_FIST         GamestatePB_GameID = 16
	GamestatePB_SEASONS_WINTER          GamestatePB_GameID = 17
	GamestatePB_SEASONS_SPRING          GamestatePB_GameID = 18
	GamestatePB_SEASONS_SUMMER          GamestatePB_GameID = 19
	GamestatePB_SEASONS_AUTUMN          GamestatePB_GameID = 20
	GamestatePB_SEASONS                 GamestatePB_GameID = 21
	GamestatePB_FRUITY_VERSE            GamestatePB_GameID = 22
	GamestatePB_A_FAIRY_TALE            GamestatePB_GameID = 23
	GamestatePB_A_HIDDEN_FOREST         GamestatePB_GameID = 24
	GamestatePB_BATTLEMECH              GamestatePB_GameID = 25
	GamestatePB_A_MILLION_LIGHTS        GamestatePB_GameID = 26
	GamestatePB_BISTRO                  GamestatePB_GameID = 27
	GamestatePB_CLOUD9                  GamestatePB_GameID = 28
	GamestatePB_LANTERN_FESTIVAL        GamestatePB_GameID = 29
	GamestatePB_A_CANDY_GIRLS_CHRISTMAS GamestatePB_GameID = 30
	GamestatePB_SKY_JEWELS              GamestatePB_GameID = 31
	GamestatePB_PEARL_FISHER            GamestatePB_GameID = 32
	GamestatePB_GOAL                    GamestatePB_GameID = 33
	GamestatePB_DAYTONA                 GamestatePB_GameID = 34
	GamestatePB_A_YEAR_OF_LAOSHU        GamestatePB_GameID = 35
	GamestatePB_DRAGON_MYST             GamestatePB_GameID = 36
	GamestatePB_COOKOFF_CHAMPION        GamestatePB_GameID = 37
	GamestatePB_CANDY_SMASH             GamestatePB_GameID = 38
	GamestatePB_VALLEY_OF_KINGS         GamestatePB_GameID = 39
	GamestatePB_CRAZY_EASTER_EGGS       GamestatePB_GameID = 40
	GamestatePB_DRIFT                   GamestatePB_GameID = 41
	GamestatePB_MAH_JONG                GamestatePB_GameID = 42
	GamestatePB_MUSEUM                  GamestatePB_GameID = 43
	GamestatePB_BANGKOK_FIGHTER         GamestatePB_GameID = 44
	GamestatePB_ASUKA_X_SAMURAI         GamestatePB_GameID = 45
	GamestatePB_SPARTA                  GamestatePB_GameID = 46
	GamestatePB_BATTLEMECH_MARS         GamestatePB_GameID = 47
	GamestatePB_ZODIAC_ELEMENTS         GamestatePB_GameID = 48
	GamestatePB_BOOK_OF_LIVING          GamestatePB_GameID = 49
	GamestatePB_PRINCESS                GamestatePB_GameID = 50
	GamestatePB_SUPA_CREW               GamestatePB_GameID = 51
	GamestatePB_FOX_TALE                GamestatePB_GameID = 52
)

// Enum value maps for GamestatePB_GameID.
var (
	GamestatePB_GameID_name = map[int32]string{
		0:  "DEFAULT",
		1:  "THE_YEAR_OF_ZHU",
		2:  "ZODIAC",
		3:  "CAT_THIEF",
		4:  "THREE_KINGDOM_SHU",
		5:  "THREE_KINGDOM_WEI",
		6:  "THREE_KINGDOM_WU",
		7:  "CRIMSON_MASQUERADE",
		8:  "JUNGLE_SAGA",
		9:  "CANDY_GIRLS",
		10: "WUKONG_TREASURES",
		11: "STREET_RACER",
		12: "BABAKS_QUEST",
		13: "ASTRO_GEMS",
		14: "PANDA",
		15: "KING_OF_GAMBLERS",
		16: "ART_OF_THE_FIST",
		17: "SEASONS_WINTER",
		18: "SEASONS_SPRING",
		19: "SEASONS_SUMMER",
		20: "SEASONS_AUTUMN",
		21: "SEASONS",
		22: "FRUITY_VERSE",
		23: "A_FAIRY_TALE",
		24: "A_HIDDEN_FOREST",
		25: "BATTLEMECH",
		26: "A_MILLION_LIGHTS",
		27: "BISTRO",
		28: "CLOUD9",
		29: "LANTERN_FESTIVAL",
		30: "A_CANDY_GIRLS_CHRISTMAS",
		31: "SKY_JEWELS",
		32: "PEARL_FISHER",
		33: "GOAL",
		34: "DAYTONA",
		35: "A_YEAR_OF_LAOSHU",
		36: "DRAGON_MYST",
		37: "COOKOFF_CHAMPION",
		38: "CANDY_SMASH",
		39: "VALLEY_OF_KINGS",
		40: "CRAZY_EASTER_EGGS",
		41: "DRIFT",
		42: "MAH_JONG",
		43: "MUSEUM",
		44: "BANGKOK_FIGHTER",
		45: "ASUKA_X_SAMURAI",
		46: "SPARTA",
		47: "BATTLEMECH_MARS",
		48: "ZODIAC_ELEMENTS",
		49: "BOOK_OF_LIVING",
		50: "PRINCESS",
		51: "SUPA_CREW",
		52: "FOX_TALE",
	}
	GamestatePB_GameID_value = map[string]int32{
		"DEFAULT":                 0,
		"THE_YEAR_OF_ZHU":         1,
		"ZODIAC":                  2,
		"CAT_THIEF":               3,
		"THREE_KINGDOM_SHU":       4,
		"THREE_KINGDOM_WEI":       5,
		"THREE_KINGDOM_WU":        6,
		"CRIMSON_MASQUERADE":      7,
		"JUNGLE_SAGA":             8,
		"CANDY_GIRLS":             9,
		"WUKONG_TREASURES":        10,
		"STREET_RACER":            11,
		"BABAKS_QUEST":            12,
		"ASTRO_GEMS":              13,
		"PANDA":                   14,
		"KING_OF_GAMBLERS":        15,
		"ART_OF_THE_FIST":         16,
		"SEASONS_WINTER":          17,
		"SEASONS_SPRING":          18,
		"SEASONS_SUMMER":          19,
		"SEASONS_AUTUMN":          20,
		"SEASONS":                 21,
		"FRUITY_VERSE":            22,
		"A_FAIRY_TALE":            23,
		"A_HIDDEN_FOREST":         24,
		"BATTLEMECH":              25,
		"A_MILLION_LIGHTS":        26,
		"BISTRO":                  27,
		"CLOUD9":                  28,
		"LANTERN_FESTIVAL":        29,
		"A_CANDY_GIRLS_CHRISTMAS": 30,
		"SKY_JEWELS":              31,
		"PEARL_FISHER":            32,
		"GOAL":                    33,
		"DAYTONA":                 34,
		"A_YEAR_OF_LAOSHU":        35,
		"DRAGON_MYST":             36,
		"COOKOFF_CHAMPION":        37,
		"CANDY_SMASH":             38,
		"VALLEY_OF_KINGS":         39,
		"CRAZY_EASTER_EGGS":       40,
		"DRIFT":                   41,
		"MAH_JONG":                42,
		"MUSEUM":                  43,
		"BANGKOK_FIGHTER":         44,
		"ASUKA_X_SAMURAI":         45,
		"SPARTA":                  46,
		"BATTLEMECH_MARS":         47,
		"ZODIAC_ELEMENTS":         48,
		"BOOK_OF_LIVING":          49,
		"PRINCESS":                50,
		"SUPA_CREW":               51,
		"FOX_TALE":                52,
	}
)

func (x GamestatePB_GameID) Enum() *GamestatePB_GameID {
	p := new(GamestatePB_GameID)
	*p = x
	return p
}

func (x GamestatePB_GameID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamestatePB_GameID) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_v1_proto_enumTypes[2].Descriptor()
}

func (GamestatePB_GameID) Type() protoreflect.EnumType {
	return &file_datatypes_v1_proto_enumTypes[2]
}

func (x GamestatePB_GameID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamestatePB_GameID.Descriptor instead.
func (GamestatePB_GameID) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{4, 0}
}

type GamestatePB_Action int32

const (
	GamestatePB_base          GamestatePB_Action = 0
	GamestatePB_finish        GamestatePB_Action = 1
	GamestatePB_freespin      GamestatePB_Action = 2
	GamestatePB_pickSpins     GamestatePB_Action = 3
	GamestatePB_respin        GamestatePB_Action = 4
	GamestatePB_freespin2     GamestatePB_Action = 5
	GamestatePB_freespin3     GamestatePB_Action = 6
	GamestatePB_freespin4     GamestatePB_Action = 7
	GamestatePB_freespin5     GamestatePB_Action = 8
	GamestatePB_freespin10    GamestatePB_Action = 9
	GamestatePB_freespin25    GamestatePB_Action = 10
	GamestatePB_cascade       GamestatePB_Action = 11
	GamestatePB_shuffleflop   GamestatePB_Action = 12
	GamestatePB_shuffleprime  GamestatePB_Action = 13
	GamestatePB_maxBase       GamestatePB_Action = 14
	GamestatePB_randomPrize   GamestatePB_Action = 15
	GamestatePB_gamble1       GamestatePB_Action = 16
	GamestatePB_gamble2       GamestatePB_Action = 17
	GamestatePB_gamble3       GamestatePB_Action = 18
	GamestatePB_freespinE1    GamestatePB_Action = 19
	GamestatePB_freespinE2    GamestatePB_Action = 20
	GamestatePB_freespinE3    GamestatePB_Action = 21
	GamestatePB_freespinE4    GamestatePB_Action = 22
	GamestatePB_freespinE5    GamestatePB_Action = 23
	GamestatePB_freespinE6    GamestatePB_Action = 24
	GamestatePB_freespinE7    GamestatePB_Action = 25
	GamestatePB_freespinE8    GamestatePB_Action = 26
	GamestatePB_freespinE0    GamestatePB_Action = 27
	GamestatePB_gamble0       GamestatePB_Action = 28
	GamestatePB_fattilereel   GamestatePB_Action = 29
	GamestatePB_fattilechance GamestatePB_Action = 30
)

// Enum value maps for GamestatePB_Action.
var (
	GamestatePB_Action_name = map[int32]string{
		0:  "base",
		1:  "finish",
		2:  "freespin",
		3:  "pickSpins",
		4:  "respin",
		5:  "freespin2",
		6:  "freespin3",
		7:  "freespin4",
		8:  "freespin5",
		9:  "freespin10",
		10: "freespin25",
		11: "cascade",
		12: "shuffleflop",
		13: "shuffleprime",
		14: "maxBase",
		15: "randomPrize",
		16: "gamble1",
		17: "gamble2",
		18: "gamble3",
		19: "freespinE1",
		20: "freespinE2",
		21: "freespinE3",
		22: "freespinE4",
		23: "freespinE5",
		24: "freespinE6",
		25: "freespinE7",
		26: "freespinE8",
		27: "freespinE0",
		28: "gamble0",
		29: "fattilereel",
		30: "fattilechance",
	}
	GamestatePB_Action_value = map[string]int32{
		"base":          0,
		"finish":        1,
		"freespin":      2,
		"pickSpins":     3,
		"respin":        4,
		"freespin2":     5,
		"freespin3":     6,
		"freespin4":     7,
		"freespin5":     8,
		"freespin10":    9,
		"freespin25":    10,
		"cascade":       11,
		"shuffleflop":   12,
		"shuffleprime":  13,
		"maxBase":       14,
		"randomPrize":   15,
		"gamble1":       16,
		"gamble2":       17,
		"gamble3":       18,
		"freespinE1":    19,
		"freespinE2":    20,
		"freespinE3":    21,
		"freespinE4":    22,
		"freespinE5":    23,
		"freespinE6":    24,
		"freespinE7":    25,
		"freespinE8":    26,
		"freespinE0":    27,
		"gamble0":       28,
		"fattilereel":   29,
		"fattilechance": 30,
	}
)

func (x GamestatePB_Action) Enum() *GamestatePB_Action {
	p := new(GamestatePB_Action)
	*p = x
	return p
}

func (x GamestatePB_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamestatePB_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_v1_proto_enumTypes[3].Descriptor()
}

func (GamestatePB_Action) Type() protoreflect.EnumType {
	return &file_datatypes_v1_proto_enumTypes[3]
}

func (x GamestatePB_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamestatePB_Action.Descriptor instead.
func (GamestatePB_Action) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{4, 1}
}

type PayoutPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     int32 `protobuf:"varint,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Count      int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Multiplier int32 `protobuf:"varint,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *PayoutPB) Reset() {
	*x = PayoutPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutPB) ProtoMessage() {}

func (x *PayoutPB) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutPB.ProtoReflect.Descriptor instead.
func (*PayoutPB) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{0}
}

func (x *PayoutPB) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *PayoutPB) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PayoutPB) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type PrizePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout          *PayoutPB `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
	Multiplier      int32     `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	SymbolPositions []int32   `protobuf:"varint,3,rep,packed,name=symbol_positions,json=symbolPositions,proto3" json:"symbol_positions,omitempty"`
	Winline         int32     `protobuf:"varint,4,opt,name=winline,proto3" json:"winline,omitempty"`
}

func (x *PrizePB) Reset() {
	*x = PrizePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrizePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrizePB) ProtoMessage() {}

func (x *PrizePB) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrizePB.ProtoReflect.Descriptor instead.
func (*PrizePB) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{1}
}

func (x *PrizePB) GetPayout() *PayoutPB {
	if x != nil {
		return x.Payout
	}
	return nil
}

func (x *PrizePB) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *PrizePB) GetSymbolPositions() []int32 {
	if x != nil {
		return x.SymbolPositions
	}
	return nil
}

func (x *PrizePB) GetWinline() int32 {
	if x != nil {
		return x.Winline
	}
	return 0
}

type WalletTransactionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount   int64                    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Type     WalletTransactionPB_Type `protobuf:"varint,3,opt,name=type,proto3,enum=engine.WalletTransactionPB_Type" json:"type,omitempty"`
	Currency Ccy                      `protobuf:"varint,4,opt,name=currency,proto3,enum=engine.Ccy" json:"currency,omitempty"`
}

func (x *WalletTransactionPB) Reset() {
	*x = WalletTransactionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransactionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransactionPB) ProtoMessage() {}

func (x *WalletTransactionPB) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransactionPB.ProtoReflect.Descriptor instead.
func (*WalletTransactionPB) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{2}
}

func (x *WalletTransactionPB) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WalletTransactionPB) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WalletTransactionPB) GetType() WalletTransactionPB_Type {
	if x != nil {
		return x.Type
	}
	return WalletTransactionPB_DEFAULT
}

func (x *WalletTransactionPB) GetCurrency() Ccy {
	if x != nil {
		return x.Currency
	}
	return Ccy_DEFAULT
}

type FeaturePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FeaturePB) Reset() {
	*x = FeaturePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturePB) ProtoMessage() {}

func (x *FeaturePB) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturePB.ProtoReflect.Descriptor instead.
func (*FeaturePB) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{3}
}

func (x *FeaturePB) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeaturePB) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeaturePB) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GamestatePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId            GamestatePB_GameID        `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3,enum=engine.GamestatePB_GameID" json:"game_id,omitempty"`
	EngineDef         int32                     `protobuf:"varint,2,opt,name=engine_def,json=engineDef,proto3" json:"engine_def,omitempty"`
	BetPerLine        int64                     `protobuf:"varint,3,opt,name=bet_per_line,json=betPerLine,proto3" json:"bet_per_line,omitempty"`
	Currency          Ccy                       `protobuf:"varint,4,opt,name=currency,proto3,enum=engine.Ccy" json:"currency,omitempty"`
	PreviousGamestate []byte                    `protobuf:"bytes,5,opt,name=previous_gamestate,json=previousGamestate,proto3" json:"previous_gamestate,omitempty"`
	NextGamestate     []byte                    `protobuf:"bytes,6,opt,name=next_gamestate,json=nextGamestate,proto3" json:"next_gamestate,omitempty"`
	Action            GamestatePB_Action        `protobuf:"varint,7,opt,name=action,proto3,enum=engine.GamestatePB_Action" json:"action,omitempty"`
	SymbolGrid        []*GamestatePB_Reel       `protobuf:"bytes,8,rep,name=symbol_grid,json=symbolGrid,proto3" json:"symbol_grid,omitempty"`
	Prizes            []*PrizePB                `protobuf:"bytes,9,rep,name=prizes,proto3" json:"prizes,omitempty"`
	SelectedWinLines  []int32                   `protobuf:"varint,10,rep,packed,name=selected_win_lines,json=selectedWinLines,proto3" json:"selected_win_lines,omitempty"`
	RelativePayout    int32                     `protobuf:"varint,11,opt,name=relative_payout,json=relativePayout,proto3" json:"relative_payout,omitempty"`
	Multiplier        int32                     `protobuf:"varint,12,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	StopList          []int32                   `protobuf:"varint,13,rep,packed,name=stop_list,json=stopList,proto3" json:"stop_list,omitempty"`
	NextActions       []GamestatePB_Action      `protobuf:"varint,14,rep,packed,name=next_actions,json=nextActions,proto3,enum=engine.GamestatePB_Action" json:"next_actions,omitempty"`
	Gamification      *GamestatePB_Gamification `protobuf:"bytes,15,opt,name=gamification,proto3" json:"gamification,omitempty"`
	CumulativeWin     int64                     `protobuf:"varint,16,opt,name=cumulative_win,json=cumulativeWin,proto3" json:"cumulative_win,omitempty"`
	PlaySequence      int32                     `protobuf:"varint,17,opt,name=play_sequence,json=playSequence,proto3" json:"play_sequence,omitempty"`
	Transactions      []*WalletTransactionPB    `protobuf:"bytes,18,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Closed            bool                      `protobuf:"varint,19,opt,name=closed,proto3" json:"closed,omitempty"`
	RoundId           string                    `protobuf:"bytes,20,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	SpinWin           int64                     `protobuf:"varint,21,opt,name=spin_win,json=spinWin,proto3" json:"spin_win,omitempty"`
	RecoveryGrid      []*GamestatePB_Reel       `protobuf:"bytes,22,rep,name=recovery_grid,json=recoveryGrid,proto3" json:"recovery_grid,omitempty"`
	Features          []*FeaturePB              `protobuf:"bytes,23,rep,name=features,proto3" json:"features,omitempty"`
	FeatureView       []*GamestatePB_Reel       `protobuf:"bytes,24,rep,name=feature_view,json=featureView,proto3" json:"feature_view,omitempty"`
}

func (x *GamestatePB) Reset() {
	*x = GamestatePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamestatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamestatePB) ProtoMessage() {}

func (x *GamestatePB) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamestatePB.ProtoReflect.Descriptor instead.
func (*GamestatePB) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GamestatePB) GetGameId() GamestatePB_GameID {
	if x != nil {
		return x.GameId
	}
	return GamestatePB_DEFAULT
}

func (x *GamestatePB) GetEngineDef() int32 {
	if x != nil {
		return x.EngineDef
	}
	return 0
}

func (x *GamestatePB) GetBetPerLine() int64 {
	if x != nil {
		return x.BetPerLine
	}
	return 0
}

func (x *GamestatePB) GetCurrency() Ccy {
	if x != nil {
		return x.Currency
	}
	return Ccy_DEFAULT
}

func (x *GamestatePB) GetPreviousGamestate() []byte {
	if x != nil {
		return x.PreviousGamestate
	}
	return nil
}

func (x *GamestatePB) GetNextGamestate() []byte {
	if x != nil {
		return x.NextGamestate
	}
	return nil
}

func (x *GamestatePB) GetAction() GamestatePB_Action {
	if x != nil {
		return x.Action
	}
	return GamestatePB_base
}

func (x *GamestatePB) GetSymbolGrid() []*GamestatePB_Reel {
	if x != nil {
		return x.SymbolGrid
	}
	return nil
}

func (x *GamestatePB) GetPrizes() []*PrizePB {
	if x != nil {
		return x.Prizes
	}
	return nil
}

func (x *GamestatePB) GetSelectedWinLines() []int32 {
	if x != nil {
		return x.SelectedWinLines
	}
	return nil
}

func (x *GamestatePB) GetRelativePayout() int32 {
	if x != nil {
		return x.RelativePayout
	}
	return 0
}

func (x *GamestatePB) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *GamestatePB) GetStopList() []int32 {
	if x != nil {
		return x.StopList
	}
	return nil
}

func (x *GamestatePB) GetNextActions() []GamestatePB_Action {
	if x != nil {
		return x.NextActions
	}
	return nil
}

func (x *GamestatePB) GetGamification() *GamestatePB_Gamification {
	if x != nil {
		return x.Gamification
	}
	return nil
}

func (x *GamestatePB) GetCumulativeWin() int64 {
	if x != nil {
		return x.CumulativeWin
	}
	return 0
}

func (x *GamestatePB) GetPlaySequence() int32 {
	if x != nil {
		return x.PlaySequence
	}
	return 0
}

func (x *GamestatePB) GetTransactions() []*WalletTransactionPB {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *GamestatePB) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *GamestatePB) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GamestatePB) GetSpinWin() int64 {
	if x != nil {
		return x.SpinWin
	}
	return 0
}

func (x *GamestatePB) GetRecoveryGrid() []*GamestatePB_Reel {
	if x != nil {
		return x.RecoveryGrid
	}
	return nil
}

func (x *GamestatePB) GetFeatures() []*FeaturePB {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GamestatePB) GetFeatureView() []*GamestatePB_Reel {
	if x != nil {
		return x.FeatureView
	}
	return nil
}

type GamestatePB_Reel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []int32 `protobuf:"varint,1,rep,packed,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *GamestatePB_Reel) Reset() {
	*x = GamestatePB_Reel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamestatePB_Reel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamestatePB_Reel) ProtoMessage() {}

func (x *GamestatePB_Reel) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamestatePB_Reel.ProtoReflect.Descriptor instead.
func (*GamestatePB_Reel) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GamestatePB_Reel) GetSymbols() []int32 {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type GamestatePB_Gamification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Stage          int32 `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	RemainingSpins int32 `protobuf:"varint,3,opt,name=remaining_spins,json=remainingSpins,proto3" json:"remaining_spins,omitempty"`
	SpinsToStageUp int32 `protobuf:"varint,4,opt,name=spins_to_stage_up,json=spinsToStageUp,proto3" json:"spins_to_stage_up,omitempty"`
	TotalSpins     int32 `protobuf:"varint,5,opt,name=total_spins,json=totalSpins,proto3" json:"total_spins,omitempty"`
}

func (x *GamestatePB_Gamification) Reset() {
	*x = GamestatePB_Gamification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamestatePB_Gamification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamestatePB_Gamification) ProtoMessage() {}

func (x *GamestatePB_Gamification) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamestatePB_Gamification.ProtoReflect.Descriptor instead.
func (*GamestatePB_Gamification) Descriptor() ([]byte, []int) {
	return file_datatypes_v1_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GamestatePB_Gamification) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GamestatePB_Gamification) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *GamestatePB_Gamification) GetRemainingSpins() int32 {
	if x != nil {
		return x.RemainingSpins
	}
	return 0
}

func (x *GamestatePB_Gamification) GetSpinsToStageUp() int32 {
	if x != nil {
		return x.SpinsToStageUp
	}
	return 0
}

func (x *GamestatePB_Gamification) GetTotalSpins() int32 {
	if x != nil {
		return x.TotalSpins
	}
	return 0
}

var File_datatypes_v1_proto protoreflect.FileDescriptor

var file_datatypes_v1_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x58, 0x0a, 0x08,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x50, 0x42, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x50, 0x42, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x47, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x4e, 0x44, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x43, 0x0a, 0x09, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xad, 0x15, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12,
	0x33, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x47,
	0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x50, 0x42, 0x52, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x47, 0x61, 0x6d, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x69, 0x6e, 0x57, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x65,
	0x6c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x47, 0x72, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x42, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x65, 0x6c, 0x52, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x20, 0x0a, 0x04, 0x52,
	0x65, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x1a, 0xaf, 0x01,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x69, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x70, 0x69, 0x6e, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x22,
	0xc1, 0x07, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x45, 0x5f, 0x59,
	0x45, 0x41, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x5a, 0x48, 0x55, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x54, 0x5f,
	0x54, 0x48, 0x49, 0x45, 0x46, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x52, 0x45, 0x45,
	0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x5f, 0x53, 0x48, 0x55, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x5f,
	0x57, 0x45, 0x49, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x5f, 0x57, 0x55, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x52, 0x49, 0x4d, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x53, 0x51, 0x55, 0x45, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x55, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x41,
	0x47, 0x41, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x47, 0x49,
	0x52, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x55, 0x4b, 0x4f, 0x4e, 0x47, 0x5f,
	0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x52, 0x45, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x41, 0x42, 0x41, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x47, 0x45, 0x4d, 0x53, 0x10, 0x0d, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x52, 0x53, 0x10, 0x0f,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46,
	0x49, 0x53, 0x54, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53,
	0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x55, 0x54,
	0x55, 0x4d, 0x4e, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53,
	0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x45, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x52, 0x59, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x5f, 0x48, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x53, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x43, 0x48, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10,
	0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x53, 0x54, 0x52, 0x4f, 0x10, 0x1b, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x39, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x5f, 0x46, 0x45, 0x53, 0x54, 0x49, 0x56, 0x41, 0x4c, 0x10, 0x1d, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x47, 0x49, 0x52, 0x4c, 0x53,
	0x5f, 0x43, 0x48, 0x52, 0x49, 0x53, 0x54, 0x4d, 0x41, 0x53, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x4b, 0x59, 0x5f, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x53, 0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x20, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x21, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x41, 0x59, 0x54,
	0x4f, 0x4e, 0x41, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f,
	0x4f, 0x46, 0x5f, 0x4c, 0x41, 0x4f, 0x53, 0x48, 0x55, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x59, 0x53, 0x54, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4f, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e,
	0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x53, 0x4d, 0x41, 0x53,
	0x48, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x4c, 0x4c, 0x45, 0x59, 0x5f, 0x4f, 0x46,
	0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x27, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x41, 0x5a,
	0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x47, 0x47, 0x53, 0x10, 0x28, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x49, 0x46, 0x54, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x48, 0x5f, 0x4a, 0x4f, 0x4e, 0x47, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x53, 0x45,
	0x55, 0x4d, 0x10, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x4e, 0x47, 0x4b, 0x4f, 0x4b, 0x5f,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x55,
	0x4b, 0x41, 0x5f, 0x58, 0x5f, 0x53, 0x41, 0x4d, 0x55, 0x52, 0x41, 0x49, 0x10, 0x2d, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x50, 0x41, 0x52, 0x54, 0x41, 0x10, 0x2e, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x52, 0x53, 0x10, 0x2f, 0x12,
	0x13, 0x0a, 0x0f, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x30, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4f, 0x46, 0x5f,
	0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x4e,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x50, 0x41, 0x5f, 0x43,
	0x52, 0x45, 0x57, 0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x58, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x10, 0x34, 0x22, 0xd9, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x32, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x33, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x34, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x35, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x73, 0x70, 0x69, 0x6e, 0x31, 0x30, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x73, 0x70, 0x69, 0x6e, 0x32, 0x35, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x61, 0x73,
	0x63, 0x61, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x66, 0x6c, 0x6f, 0x70, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x42, 0x61, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x62, 0x6c,
	0x65, 0x31, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x32, 0x10,
	0x11, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x33, 0x10, 0x12, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x31, 0x10, 0x13, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x32, 0x10, 0x14, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x33, 0x10, 0x15, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x34, 0x10, 0x16, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x35, 0x10, 0x17, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x36, 0x10, 0x18, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x37, 0x10, 0x19, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x38, 0x10, 0x1a, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x45, 0x30, 0x10, 0x1b, 0x12, 0x0b,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x30, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x66,
	0x61, 0x74, 0x74, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x65, 0x6c, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d,
	0x66, 0x61, 0x74, 0x74, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x1e, 0x2a,
	0xba, 0x07, 0x0a, 0x03, 0x43, 0x63, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x53, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x42, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x59,
	0x52, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x52, 0x57, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x52, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x5a, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x42, 0x54, 0x10, 0x0d,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x44,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x4b, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x45, 0x4b, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x42, 0x10, 0x12, 0x12, 0x07, 0x0a,
	0x03, 0x4b, 0x5a, 0x54, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4d, 0x4b, 0x10, 0x14, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x45, 0x53, 0x10,
	0x16, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f,
	0x42, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x59, 0x47, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x45, 0x4e, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x50, 0x10, 0x1b, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x59, 0x55, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10, 0x1d,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4f, 0x41, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x52, 0x53, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x5a, 0x4e, 0x10, 0x21, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x41, 0x4d, 0x10, 0x23, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x44, 0x54, 0x10, 0x24, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x44, 0x10,
	0x26, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x44, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57,
	0x50, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x44, 0x46, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x48, 0x46, 0x10, 0x2a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x52, 0x43, 0x10, 0x2b, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x4f, 0x50, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x2d,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x50,
	0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x47, 0x50, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x45, 0x4c, 0x10, 0x31, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x53, 0x10, 0x32, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x49, 0x50, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e, 0x46, 0x10, 0x34, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x54, 0x51, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10,
	0x36, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x4b, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x54,
	0x47, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4c, 0x53, 0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x3b, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x51, 0x44, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x52, 0x10, 0x3d,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x44,
	0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x53, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x57, 0x44, 0x10, 0x41, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x10, 0x42, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x53, 0x4c, 0x10, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x44, 0x10, 0x44, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x42, 0x43, 0x10, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4b, 0x44, 0x10,
	0x46, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41,
	0x44, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x5a, 0x44, 0x10, 0x4a, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4d, 0x52, 0x10, 0x4b, 0x12, 0x07,
	0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x4d, 0x4b, 0x10, 0x4d,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x4c, 0x4e, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4f, 0x46,
	0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x4f, 0x4e, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x44, 0x10, 0x52, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x57, 0x46, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x10, 0x54, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x4d, 0x54, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10,
	0x56, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x5a, 0x53, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x41,
	0x48, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x42, 0x43, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x47, 0x58, 0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x41, 0x46, 0x10, 0x5b, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x5c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x58, 0x10, 0x5d,
	0x12, 0x07, 0x0a, 0x03, 0x56, 0x45, 0x58, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x54,
	0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x43, 0x48, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x43, 0x10, 0x62, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x59, 0x4e, 0x10, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x5a, 0x53, 0x10, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x44, 0x4c, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x10,
	0x66, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x47, 0x41, 0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4a,
	0x53, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10, 0x69, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6d, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x6b, 0x2d,
	0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x6b,
	0x2f, 0x72, 0x67, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datatypes_v1_proto_rawDescOnce sync.Once
	file_datatypes_v1_proto_rawDescData = file_datatypes_v1_proto_rawDesc
)

func file_datatypes_v1_proto_rawDescGZIP() []byte {
	file_datatypes_v1_proto_rawDescOnce.Do(func() {
		file_datatypes_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_datatypes_v1_proto_rawDescData)
	})
	return file_datatypes_v1_proto_rawDescData
}

var file_datatypes_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_datatypes_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_datatypes_v1_proto_goTypes = []interface{}{
	(Ccy)(0),                         // 0: engine.Ccy
	(WalletTransactionPB_Type)(0),    // 1: engine.WalletTransactionPB.Type
	(GamestatePB_GameID)(0),          // 2: engine.GamestatePB.GameID
	(GamestatePB_Action)(0),          // 3: engine.GamestatePB.Action
	(*PayoutPB)(nil),                 // 4: engine.PayoutPB
	(*PrizePB)(nil),                  // 5: engine.PrizePB
	(*WalletTransactionPB)(nil),      // 6: engine.WalletTransactionPB
	(*FeaturePB)(nil),                // 7: engine.FeaturePB
	(*GamestatePB)(nil),              // 8: engine.GamestatePB
	(*GamestatePB_Reel)(nil),         // 9: engine.GamestatePB.Reel
	(*GamestatePB_Gamification)(nil), // 10: engine.GamestatePB.Gamification
}
var file_datatypes_v1_proto_depIdxs = []int32{
	4,  // 0: engine.PrizePB.payout:type_name -> engine.PayoutPB
	1,  // 1: engine.WalletTransactionPB.type:type_name -> engine.WalletTransactionPB.Type
	0,  // 2: engine.WalletTransactionPB.currency:type_name -> engine.Ccy
	2,  // 3: engine.GamestatePB.game_id:type_name -> engine.GamestatePB.GameID
	0,  // 4: engine.GamestatePB.currency:type_name -> engine.Ccy
	3,  // 5: engine.GamestatePB.action:type_name -> engine.GamestatePB.Action
	9,  // 6: engine.GamestatePB.symbol_grid:type_name -> engine.GamestatePB.Reel
	5,  // 7: engine.GamestatePB.prizes:type_name -> engine.PrizePB
	3,  // 8: engine.GamestatePB.next_actions:type_name -> engine.GamestatePB.Action
	10, // 9: engine.GamestatePB.gamification:type_name -> engine.GamestatePB.Gamification
	6,  // 10: engine.GamestatePB.transactions:type_name -> engine.WalletTransactionPB
	9,  // 11: engine.GamestatePB.recovery_grid:type_name -> engine.GamestatePB.Reel
	7,  // 12: engine.GamestatePB.features:type_name -> engine.FeaturePB
	9,  // 13: engine.GamestatePB.feature_view:type_name -> engine.GamestatePB.Reel
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_datatypes_v1_proto_init() }
func file_datatypes_v1_proto_init() {
	if File_datatypes_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datatypes_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrizePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransactionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamestatePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamestatePB_Reel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamestatePB_Gamification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datatypes_v1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datatypes_v1_proto_goTypes,
		DependencyIndexes: file_datatypes_v1_proto_depIdxs,
		EnumInfos:         file_datatypes_v1_proto_enumTypes,
		MessageInfos:      file_datatypes_v1_proto_msgTypes,
	}.Build()
	File_datatypes_v1_proto = out.File
	file_datatypes_v1_proto_rawDesc = nil
	file_datatypes_v1_proto_goTypes = nil
	file_datatypes_v1_proto_depIdxs = nil
}
